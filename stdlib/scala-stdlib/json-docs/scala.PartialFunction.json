{
  "name": "scala.PartialFunction",
  "type_parameters": [
    "-A",
    "+B"
  ],
  "implements": [
    "(A) => B"
  ],
  "inherits": [
    "(A) => B"
  ],
  "class_type": 1,
  "methods": [
    {
      "name": "isDefinedAt",
      "parameters": [
        "A"
      ],
      "type_parameters": [],
      "return_type": "scala.Boolean",
      "receiver": null,
      "is_static": false,
      "is_constructor": false,
      "access_mod": "public"
    },
    {
      "name": "andThen",
      "parameters": [
        "scala.PartialFunction[B, C]"
      ],
      "type_parameters": [
        "C"
      ],
      "return_type": "scala.PartialFunction[A, C]",
      "receiver": null,
      "is_static": false,
      "is_constructor": false,
      "access_mod": "public"
    },
    {
      "name": "andThen",
      "parameters": [
        "(B) => C"
      ],
      "type_parameters": [
        "C"
      ],
      "return_type": "scala.PartialFunction[A, C]",
      "receiver": null,
      "is_static": false,
      "is_constructor": false,
      "access_mod": "public"
    },
    {
      "name": "applyOrElse",
      "parameters": [
        "A1",
        "(A1) => B1"
      ],
      "type_parameters": [
        "A1 <: A",
        "B1 >: B"
      ],
      "return_type": "B1",
      "receiver": null,
      "is_static": false,
      "is_constructor": false,
      "access_mod": "public"
    },
    {
      "name": "compose",
      "parameters": [
        "scala.PartialFunction[R, A]"
      ],
      "type_parameters": [
        "R"
      ],
      "return_type": "scala.PartialFunction[R, B]",
      "receiver": null,
      "is_static": false,
      "is_constructor": false,
      "access_mod": "public"
    },
    {
      "name": "orElse",
      "parameters": [
        "scala.PartialFunction[A1, B1]"
      ],
      "type_parameters": [
        "A1 <: A",
        "B1 >: B"
      ],
      "return_type": "scala.PartialFunction[A1, B1]",
      "receiver": null,
      "is_static": false,
      "is_constructor": false,
      "access_mod": "public"
    },
    {
      "name": "runWith",
      "parameters": [
        "(B) => U"
      ],
      "type_parameters": [
        "U"
      ],
      "return_type": "(A) => scala.Boolean",
      "receiver": null,
      "is_static": false,
      "is_constructor": false,
      "access_mod": "public"
    },
    {
      "name": "unapply",
      "parameters": [
        "A"
      ],
      "type_parameters": [],
      "return_type": "scala.Option[B]",
      "receiver": null,
      "is_static": false,
      "is_constructor": false,
      "access_mod": "public"
    },
    {
      "name": "cond",
      "parameters": [
        "A"
      ],
      "type_parameters": [
        "A"
      ],
      "return_type": "(scala.PartialFunction[A, scala.Boolean]) => scala.Boolean",
      "receiver": null,
      "is_static": true,
      "is_constructor": false,
      "access_mod": "public"
    },
    {
      "name": "condOpt",
      "parameters": [
        "A"
      ],
      "type_parameters": [
        "A",
        "B"
      ],
      "return_type": "(scala.PartialFunction[A, B]) => scala.Option[B]",
      "receiver": null,
      "is_static": true,
      "is_constructor": false,
      "access_mod": "public"
    },
    {
      "name": "fromFunction",
      "parameters": [
        "(A) => B"
      ],
      "type_parameters": [
        "A",
        "B"
      ],
      "return_type": "scala.PartialFunction[A, B]",
      "receiver": null,
      "is_static": true,
      "is_constructor": false,
      "access_mod": "public"
    }
  ],
  "fields": [
    {
      "name": "elementWise",
      "type": "scala.PartialFunction.ElementWiseExtractor[A, B]",
      "is_final": false,
      "is_override": false,
      "receiver": null,
      "type_parameters": [],
      "access_mod": "public",
      "is_static": false
    },
    {
      "name": "lift",
      "type": "(A) => scala.Option[B]",
      "is_final": false,
      "is_override": false,
      "receiver": null,
      "type_parameters": [],
      "access_mod": "public",
      "is_static": false
    }
  ],
  "is_class": true,
  "access_mod": "public",
  "language": "scala"
}