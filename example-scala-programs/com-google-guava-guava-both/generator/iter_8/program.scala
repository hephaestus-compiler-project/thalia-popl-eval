package src.fagin
def test[Y <: com.google.common.base.Throwables, S <: Any & java.lang.Object, H <: Any & java.lang.Object](): Unit =
{
  val undoings = (???.asInstanceOf[com.google.common.collect.ForwardingConcurrentMap[java.io.UncheckedIOException, com.google.common.collect.ForwardingSortedMap[AnyRef, AnyRef]]]).`putIfAbsent`(???.asInstanceOf[java.io.UncheckedIOException], ???.asInstanceOf[com.google.common.collect.ForwardingSortedMap[AnyRef, AnyRef]]);
  val basalt: java.util.Map[? <: com.google.common.util.concurrent.ListeningScheduledExecutorService, ? <: java.util.concurrent.Callable[? <: com.google.common.collect.MapDifference.ValueDifference[AnyRef]]] = ???.asInstanceOf[java.util.Map[? <: com.google.common.util.concurrent.ListeningScheduledExecutorService, ? <: java.util.concurrent.Callable[? <: com.google.common.collect.MapDifference.ValueDifference[AnyRef]]]];
    val asparagus: com.google.common.collect.ImmutableBiMap[com.google.common.io.Resources, com.google.common.collect.SortedSetMultimap[AnyRef, AnyRef]] = (???.asInstanceOf[com.google.common.cache.ForwardingCache[com.google.common.collect.ForwardingSortedMap[AnyRef, AnyRef], com.google.common.collect.MapDifference.ValueDifference[AnyRef]]]).`get`(undoings, new java.util.TreeMap(basalt).`get`(???.asInstanceOf[AnyRef])).`hashCode`();
  }