package src.impure
def test[A <: Any & java.lang.Object, W <: java.util.Date, B <: com.google.common.util.concurrent.UncaughtExceptionHandlers, J <: com.google.common.collect.TreeRangeSet[? <: java.lang.Comparable[java.lang.IllegalArgumentException]]](): Unit =
{
  val gilgamesh: J = com.google.common.collect.ImmutableRangeMap.`builder`[java.lang.Comparable[java.io.SequenceInputStream],J]().`build`().`get`(???.asInstanceOf[java.lang.Comparable[java.io.SequenceInputStream]]);
  val marcelo: J = java.util.Objects.`requireNonNullElse`[J](gilgamesh, (???.asInstanceOf[com.google.common.graph.AbstractNetwork[com.google.common.base.VerifyException, J]]).`edgeConnectingOrNull`(???.asInstanceOf[com.google.common.graph.EndpointPair[com.google.common.base.VerifyException]]));
  val salvos: java.util.ServiceConfigurationError = ???.asInstanceOf[java.util.ServiceConfigurationError];
  val astrology: java.util.Map[? <: AnyRef, ? <: com.google.common.collect.Range[java.lang.Comparable[java.lang.IllegalArgumentException]]] = (???.asInstanceOf[com.google.common.cache.ForwardingLoadingCache[java.util.ServiceConfigurationError, java.util.Map[? <: AnyRef, ? <: com.google.common.collect.Range[java.lang.Comparable[java.lang.IllegalArgumentException]]]]]).`apply`(salvos);
  val dissented: com.google.common.collect.Range[java.lang.Comparable[java.lang.IllegalArgumentException]] = com.google.common.collect.Maps.`newLinkedHashMap`[AnyRef,com.google.common.collect.Range[java.lang.Comparable[java.lang.IllegalArgumentException]]](astrology).`get`(new java.util.StringTokenizer("goth", "oslo", true).`nextElement`().`synchronized`[AnyRef](???.asInstanceOf[AnyRef]));
    val tortures: com.google.common.collect.RangeSet[java.lang.Comparable[java.lang.IllegalArgumentException]] = marcelo.`subRangeSet`(dissented);
  }