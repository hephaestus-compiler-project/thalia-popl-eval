package src.bummer
def test[J <: Any & java.lang.Object, R <: java.util.Collections, X <: scala.Symbol](): Unit =
{
  val rend: java.util.function.Supplier[com.google.common.util.concurrent.AtomicDoubleArray] = () => ???.asInstanceOf[com.google.common.collect.ImmutableSortedMap[com.google.common.util.concurrent.AtomicDoubleArray, java.io.InvalidClassException]].lastKey();
  val cadged: java.util.function.ObjDoubleConsumer[com.google.common.util.concurrent.AtomicDoubleArray] = ???.asInstanceOf[com.google.common.cache.Cache[com.google.common.util.concurrent.AtomicDoubleArray, Double]].put;
  val nuked: AnyRef = ???.asInstanceOf[AnyRef];
  val transvaal: AnyRef = new scala.Tuple3[com.google.common.util.concurrent.ClosingFuture.ValueAndCloserConsumer[AnyRef], AnyRef, com.google.common.graph.EndpointPair[com.google.common.cache.ForwardingLoadingCache.SimpleForwardingLoadingCache[scala.=:=[com.google.common.graph.Graph[com.google.common.collect.LinkedHashMultiset[AnyRef]], com.google.common.collect.MultimapBuilder[java.util.function.BiConsumer[java.util.Currency, java.io.CharArrayWriter], scala.collection.Iterable[scala.Function1[java.util.IllegalFormatCodePointException, scala.collection.AbstractIterator[scala.collection.AbstractSeqView[com.google.common.graph.ImmutableGraph[com.google.common.graph.ImmutableValueGraph.Builder[com.google.common.io.LineProcessor[AnyRef], java.util.Vector[java.security.Permission]]]]]]]]], com.google.common.graph.NetworkBuilder[com.google.common.util.concurrent.AbstractFuture[AnyRef], java.io.PipedInputStream]]]]((nor: com.google.common.util.concurrent.ClosingFuture.ValueAndCloser[AnyRef]) => {
  ;
  }: Unit, nuked, ???.asInstanceOf[com.google.common.graph.EndpointPair[com.google.common.cache.ForwardingLoadingCache.SimpleForwardingLoadingCache[scala.=:=[com.google.common.graph.Graph[com.google.common.collect.LinkedHashMultiset[AnyRef]], com.google.common.collect.MultimapBuilder[java.util.function.BiConsumer[java.util.Currency, java.io.CharArrayWriter], scala.collection.Iterable[scala.Function1[java.util.IllegalFormatCodePointException, scala.collection.AbstractIterator[scala.collection.AbstractSeqView[com.google.common.graph.ImmutableGraph[com.google.common.graph.ImmutableValueGraph.Builder[com.google.common.io.LineProcessor[AnyRef], java.util.Vector[java.security.Permission]]]]]]]]], com.google.common.graph.NetworkBuilder[com.google.common.util.concurrent.AbstractFuture[AnyRef], java.io.PipedInputStream]]]])._2;
  val overlord: Int = new java.util.LinkedHashMap[com.google.common.math.Quantiles.Scale, Int]().`get`(transvaal);
  val hitchhike: com.google.common.eventbus.EventBus = ???.asInstanceOf[com.google.common.eventbus.EventBus];
  val curtseys: com.google.common.util.concurrent.ExecutionError = com.google.common.collect.ImmutableSortedMap.`copyOf`[java.io.SequenceInputStream,com.google.common.util.concurrent.ExecutionError](scala.<:<.`antisymm`[com.google.common.eventbus.EventBus,java.lang.Iterable[? <: java.util.Map.Entry[? <: java.io.SequenceInputStream, ? <: com.google.common.util.concurrent.ExecutionError]]](???.asInstanceOf[scala.<:<[com.google.common.eventbus.EventBus, java.lang.Iterable[? <: java.util.Map.Entry[? <: java.io.SequenceInputStream, ? <: com.google.common.util.concurrent.ExecutionError]]]], ???.asInstanceOf[scala.<:<[java.lang.Iterable[? <: java.util.Map.Entry[? <: java.io.SequenceInputStream, ? <: com.google.common.util.concurrent.ExecutionError]], com.google.common.eventbus.EventBus]]).`apply`(hitchhike), ???.asInstanceOf[java.util.Comparator[java.io.SequenceInputStream]].compare).`get`(???.asInstanceOf[AnyRef]);
  val mirach: java.util.function.DoubleBinaryOperator = (smock: Double, arks: Double) => {
  val whirl: com.google.common.graph.Network[java.lang.ClassNotFoundException, Double] = ???.asInstanceOf[com.google.common.graph.Network[java.lang.ClassNotFoundException, Double]];
  val slices: java.lang.ClassNotFoundException = ???.asInstanceOf[java.lang.ClassNotFoundException];
    com.google.common.graph.Graphs.`transpose`[java.lang.ClassNotFoundException,Double](whirl).`edgeConnectingOrNull`(???.asInstanceOf[java.lang.ClassNotFoundException], slices);
  }: Double;
    val surrounds: Double = java.util.stream.DoubleStream.`iterate`(java.util.Map.`of`[com.google.common.collect.Tables,java.io.FilterWriter]().`values`().`parallelStream`().`reduce`[Double](-12.598, ???.asInstanceOf[scala.Function2[Double, java.io.FilterWriter, Double]].apply, ???.asInstanceOf[java.util.function.BinaryOperator[Double]]), (regiments: Double) => -30.586: Double).`collect`[com.google.common.util.concurrent.AtomicDoubleArray](rend, cadged, (frazzles: com.google.common.util.concurrent.AtomicDoubleArray, ramblers: com.google.common.util.concurrent.AtomicDoubleArray) => {
  ;
  }: Unit).`accumulateAndGet`(overlord, curtseys, mirach);
  }