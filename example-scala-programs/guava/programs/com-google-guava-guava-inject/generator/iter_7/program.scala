package src.landowner
def test[S <: java.lang.StringIndexOutOfBoundsException, N <: Any & java.lang.Object, X <: Any & java.lang.Object](): Unit =
{
  val cavalry: java.nio.file.OpenOption = ???.asInstanceOf[java.nio.file.OpenOption];
  val virtual: java.lang.Class[com.google.common.cache.ForwardingCache[java.lang.NumberFormatException, scala.Tuple2[scala.App, com.google.common.util.concurrent.AtomicDoubleArray]]] = ???.asInstanceOf[java.lang.Class[com.google.common.cache.ForwardingCache[java.lang.NumberFormatException, scala.Tuple2[scala.App, com.google.common.util.concurrent.AtomicDoubleArray]]]];
  val fatten: java.util.function.BiFunction[java.lang.Class[com.google.common.cache.ForwardingCache[java.lang.NumberFormatException, scala.Tuple2[scala.App, com.google.common.util.concurrent.AtomicDoubleArray]]], ? >: String, java.lang.Class[com.google.common.cache.ForwardingCache[java.lang.NumberFormatException, scala.Tuple2[scala.App, com.google.common.util.concurrent.AtomicDoubleArray]]]] = ???.asInstanceOf[java.util.function.BiFunction[java.lang.Class[com.google.common.cache.ForwardingCache[java.lang.NumberFormatException, scala.Tuple2[scala.App, com.google.common.util.concurrent.AtomicDoubleArray]]], String, java.lang.Class[com.google.common.cache.ForwardingCache[java.lang.NumberFormatException, scala.Tuple2[scala.App, com.google.common.util.concurrent.AtomicDoubleArray]]]]].apply;
  val shires: java.util.function.BinaryOperator[java.lang.Class[com.google.common.cache.ForwardingCache[java.lang.NumberFormatException, scala.Tuple2[scala.App, com.google.common.util.concurrent.AtomicDoubleArray]]]] = ???.asInstanceOf[java.util.function.BinaryOperator[java.lang.Class[com.google.common.cache.ForwardingCache[java.lang.NumberFormatException, scala.Tuple2[scala.App, com.google.common.util.concurrent.AtomicDoubleArray]]]]];
  val cablegram: java.lang.Class[com.google.common.cache.ForwardingCache[java.lang.NumberFormatException, scala.Tuple2[scala.App, com.google.common.util.concurrent.AtomicDoubleArray]]] = com.google.common.io.MoreFiles.`asByteSource`(???.asInstanceOf[java.nio.file.Path], cavalry).`asCharSource`(???.asInstanceOf[java.nio.charset.Charset]).`lines`().`reduce`[java.lang.Class[com.google.common.cache.ForwardingCache[java.lang.NumberFormatException, scala.Tuple2[scala.App, com.google.common.util.concurrent.AtomicDoubleArray]]]](virtual, fatten, shires);
  val numbskull: com.google.common.cache.ForwardingCache[java.lang.NumberFormatException, scala.Tuple2[scala.App, com.google.common.util.concurrent.AtomicDoubleArray]] = com.google.common.base.Defaults.`defaultValue`[com.google.common.cache.ForwardingCache[java.lang.NumberFormatException, scala.Tuple2[scala.App, com.google.common.util.concurrent.AtomicDoubleArray]]](cablegram);
    val espied: java.util.stream.Collector[com.google.common.net.HttpHeaders, com.google.common.util.concurrent.ForwardingFuture.SimpleForwardingFuture[AnyRef], java.util.concurrent.BlockingQueue[com.google.common.hash.Funnel[AnyRef]]] = numbskull.`stats`();
  }