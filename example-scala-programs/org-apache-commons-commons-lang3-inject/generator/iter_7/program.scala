package src.columbine
def test[N <: java.lang.Void, A <: scala.Proxy, H <: Any & java.lang.Object](): Unit =
{
  val hurler: java.util.stream.Collector[scala.DelayedInit, java.util.stream.Stream[java.io.Console], org.apache.commons.lang3.ObjectUtils] = ???.asInstanceOf[java.util.stream.Collector[scala.DelayedInit, java.util.stream.Stream[java.io.Console], org.apache.commons.lang3.ObjectUtils]];
  val modesty: org.apache.commons.lang3.function.FailableFunction[java.lang.UnsupportedOperationException, java.io.Console, ?] = (bayonne: java.lang.UnsupportedOperationException) => ???.asInstanceOf[java.io.Console]: java.io.Console;
  val lessee: java.lang.UnsupportedOperationException = ???.asInstanceOf[java.lang.UnsupportedOperationException];
  val checkmate: java.io.Console = org.apache.commons.lang3.function.Failable.`asFunction`[java.lang.UnsupportedOperationException,java.io.Console](modesty).`apply`(lessee);
  val pigtail: AnyRef = ???.asInstanceOf[AnyRef];
  val jeans: java.util.function.BinaryOperator[java.io.Console] = (???.asInstanceOf[java.util.AbstractMap[scala.volatile, java.util.function.BinaryOperator[java.io.Console]]]).`get`(pigtail);
    org.apache.commons.lang3.Validate.`notNaN`(org.apache.commons.lang3.Streams.`stream`[java.io.Console](java.util.stream.Collectors.`collectingAndThen`[scala.DelayedInit,java.util.stream.Stream[java.io.Console],org.apache.commons.lang3.ObjectUtils,org.apache.commons.lang3.builder.DiffResult[org.apache.commons.lang3.function.FailableToDoubleBiFunction[java.util.RandomAccess, scala.collection.ArrayOps[org.apache.commons.lang3.ArraySorter], java.lang.Throwable]]](hurler, ???.asInstanceOf[org.apache.commons.lang3.function.FailableFunction[org.apache.commons.lang3.ObjectUtils, org.apache.commons.lang3.builder.DiffResult[org.apache.commons.lang3.function.FailableToDoubleBiFunction[java.util.RandomAccess, scala.collection.ArrayOps[org.apache.commons.lang3.ArraySorter], java.lang.Throwable]], java.lang.Throwable]].apply).`supplier`().`get`()).`reduce`(checkmate, jeans));
  }