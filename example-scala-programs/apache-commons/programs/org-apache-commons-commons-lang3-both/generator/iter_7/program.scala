package src.spiteful
def test[I <: Any & java.lang.Object, R <: java.io.FileReader, Q <: org.apache.commons.lang3.text.FormattableUtils](): Unit =
{
  val rowdies: java.util.function.Supplier[Array[Long]] = () => ???.asInstanceOf[org.apache.commons.lang3.builder.Builder[Array[Long]]].build();
    val burnished: java.lang.SecurityException = org.apache.commons.lang3.ArrayUtils.`shuffle`(java.util.stream.Collector.`of`[org.apache.commons.lang3.Functions.FailableCallable[org.apache.commons.lang3.Streams.FailableStream[org.apache.commons.lang3.stream.Streams.FailableStream[java.io.OptionalDataException]], java.lang.Throwable],Array[Long]](rowdies, (mamie: Array[Long], chicagoan: org.apache.commons.lang3.Functions.FailableCallable[org.apache.commons.lang3.Streams.FailableStream[org.apache.commons.lang3.stream.Streams.FailableStream[java.io.OptionalDataException]], java.lang.Throwable]) => {
  ;
  }: Unit, (???.asInstanceOf[org.apache.commons.lang3.function.FailableCallable[java.util.function.BinaryOperator[Array[Long]], java.lang.Throwable]]).`call`(), (???.asInstanceOf[scala.Product3[java.util.function.Supplier[java.util.Map.Entry[java.util.Hashtable[org.apache.commons.lang3.time.DatePrinter, org.apache.commons.lang3.function.FailableIntToLongFunction[java.lang.Throwable]], org.apache.commons.lang3.Streams.FailableStream[org.apache.commons.lang3.function.Failable]]], java.io.OptionalDataException, java.util.stream.Collector.Characteristics]])._3).`supplier`().`get`());
  }