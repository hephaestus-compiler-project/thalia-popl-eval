package src.obscenest
def test[Z <: Any & java.lang.Object, U <: java.util.TreeSet[java.util.concurrent.ExecutorService], D <: com.google.common.util.concurrent.ClosingFuture.Combiner](): Unit =
{
  val buchanan: java.util.Spliterators = new scala.Tuple4[java.util.Spliterators, com.google.common.util.concurrent.ClosingFuture.Combiner4[AnyRef, AnyRef, AnyRef, AnyRef], com.google.common.collect.ImmutableRangeSet.Builder[java.lang.Comparable[java.io.LineNumberReader]], com.google.common.io.Files](???.asInstanceOf[java.util.Spliterators], ???.asInstanceOf[com.google.common.util.concurrent.ClosingFuture.Combiner4[AnyRef, AnyRef, AnyRef, AnyRef]], ???.asInstanceOf[com.google.common.collect.ImmutableRangeSet.Builder[java.lang.Comparable[java.io.LineNumberReader]]], ???.asInstanceOf[com.google.common.io.Files])._1;
  val clings: com.google.common.util.concurrent.AbstractExecutionThreadService = (???.asInstanceOf[scala.Product4[com.google.common.base.Optional[java.util.function.BiConsumer[scala.Enumeration, java.util.concurrent.FutureTask[scala.unchecked]]], java.io.FileDescriptor, java.lang.Comparable[com.google.common.collect.Iterators], com.google.common.util.concurrent.AbstractExecutionThreadService]])._4;
    val incisive: java.lang.CharSequence = new scala.Tuple3[java.util.Spliterators, com.google.common.util.concurrent.AbstractExecutionThreadService, com.google.common.primitives.UnsignedInts](buchanan, clings, java.util.List.`of`[com.google.common.primitives.UnsignedInts]().`listIterator`().`next`())._2.`toString`();
  }