package src.sonorous
def test[Z <: Any & java.lang.Object, U <: java.util.TreeSet[java.util.concurrent.ExecutorService], D <: com.google.common.util.concurrent.ClosingFuture.Combiner, K <: com.google.common.util.concurrent.AbstractExecutionThreadService](): Unit =
{
  val housings: com.google.common.collect.TreeMultimap[AnyRef, AnyRef] = ???.asInstanceOf[com.google.common.collect.TreeMultimap[AnyRef, AnyRef]];
  val farthest: com.google.common.graph.ImmutableValueGraph[com.google.common.io.ByteSink, K] = new scala.Tuple4[com.google.common.collect.TreeMultimap[AnyRef, AnyRef], com.google.common.collect.ImmutableCollection.Builder[java.lang.Compiler], com.google.common.util.concurrent.ListenableFutureTask[AnyRef], com.google.common.graph.ImmutableValueGraph[com.google.common.io.ByteSink, K]](housings, ???.asInstanceOf[com.google.common.collect.ImmutableCollection.Builder[java.lang.Compiler]], ???.asInstanceOf[com.google.common.util.concurrent.ListenableFutureTask[AnyRef]], ???.asInstanceOf[com.google.common.graph.ImmutableValueGraph[com.google.common.io.ByteSink, K]])._4;
  val snowplow: com.google.common.cache.CacheLoader[com.google.common.base.Optional[com.google.common.io.Closeables], com.google.common.io.ByteSink] = ???.asInstanceOf[com.google.common.cache.CacheLoader[com.google.common.base.Optional[com.google.common.io.Closeables], com.google.common.io.ByteSink]];
  val ulcers: java.util.concurrent.Executor = ???.asInstanceOf[java.util.concurrent.Executor];
  val fandom: com.google.common.base.Optional[com.google.common.io.Closeables] = ???.asInstanceOf[com.google.common.base.Optional[com.google.common.io.Closeables]];
  val sector: com.google.common.base.VerifyException = ???.asInstanceOf[com.google.common.base.VerifyException];
  val smolensk: scala.collection.IterableOnceOps[com.google.common.collect.ImmutableSet.Builder[com.google.common.collect.ImmutableClassToInstanceMap[scala.collection.AbstractIterable[java.io.UTFDataFormatException]]], scala.Function0, java.io.BufferedWriter] = ???.asInstanceOf[scala.collection.IterableOnceOps[com.google.common.collect.ImmutableSet.Builder[com.google.common.collect.ImmutableClassToInstanceMap[scala.collection.AbstractIterable[java.io.UTFDataFormatException]]], scala.Function0, java.io.BufferedWriter]];
    val yuletides: AnyRef = com.google.common.graph.ImmutableValueGraph.`copyOf`[com.google.common.io.ByteSink,K](farthest).`edgeValueOrDefault`(???.asInstanceOf[com.google.common.io.ByteSink], com.google.common.cache.CacheLoader.`asyncReloading`[com.google.common.base.Optional[com.google.common.io.Closeables],com.google.common.io.ByteSink](snowplow, ulcers).`load`(fandom), new scala.Tuple4[com.google.common.base.VerifyException, com.google.common.collect.ClassToInstanceMap[java.util.PrimitiveIterator[com.google.common.cache.ForwardingCache[com.google.common.util.concurrent.FakeTimeLimiter, java.lang.ref.PhantomReference[java.util.function.ToLongBiFunction[java.lang.ProcessBuilder, java.lang.ClassCircularityError]]], com.google.common.collect.LinkedListMultimap[AnyRef, AnyRef]]], scala.collection.IterableOnceOps[com.google.common.collect.ImmutableSet.Builder[com.google.common.collect.ImmutableClassToInstanceMap[scala.collection.AbstractIterable[java.io.UTFDataFormatException]]], scala.Function0, java.io.BufferedWriter], K](sector, ???.asInstanceOf[com.google.common.collect.ClassToInstanceMap[java.util.PrimitiveIterator[com.google.common.cache.ForwardingCache[com.google.common.util.concurrent.FakeTimeLimiter, java.lang.ref.PhantomReference[java.util.function.ToLongBiFunction[java.lang.ProcessBuilder, java.lang.ClassCircularityError]]], com.google.common.collect.LinkedListMultimap[AnyRef, AnyRef]]]], smolensk, ???.asInstanceOf[K])._4).`toString`();
  }